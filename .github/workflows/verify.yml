name: Verify C++ Files

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  prepare-matrix-yosupo:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Find yosupo files
        id: set-matrix
        run: |
          problems=$(grep -r -E '^//@yosupo' --include='*.cpp' ./verify | sed -E 's|^(.*)://@yosupo (.*)$|\2$\1|' | jq -Rsc 'split("\n") | map(select(length > 0))')
          echo "matrix=$problems" >> $GITHUB_OUTPUT

  prepare-matrix-yukicoder:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Find yukicoder files
        id: set-matrix
        run: |
          problems=$(grep -r -E '^//@yukicoder' --include='*.cpp' ./verify | sed -E 's|^(.*)://@yukicoder ([^[:space:]]+).*|\2$\1|' | jq -Rsc 'split("\n") | map(select(length > 0))')
          echo "matrix=$problems" >> $GITHUB_OUTPUT

  yosupo-verify:
    needs: prepare-matrix-yosupo
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        problem: ${{ fromJson(needs.prepare-matrix-yosupo.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract matrix info
        run: |
          echo "PROBLEM=`echo "${{ matrix.problem }}" | cut -d'$' -f1`" >> $GITHUB_ENV
          echo "FILE=`echo "${{ matrix.problem }}" | cut -d'$' -f2-`" >> $GITHUB_ENV
      - name: Echo filename
        run: echo problem:$PROBLEM,file:$FILE,dir:$DIR
      - name: Clone problems
        run: git clone https://github.com/yosupo06/library-checker-problems.git
      - name: Prepare input files
        run: cd library-checker-problems && ulimit -s unlimited && ./generate.py -p $PROBLEM
      - name: Find problem dir
        run: echo DIR=`find . -path "*/$PROBLEM" -type d` >> $GITHUB_ENV
      - name: Compile target
        run: |
          g++ -std=c++20 -O2 -I `dirname $FILE` $FILE
      - name: Execute
        run: |
          mkdir -p ./out
          find "$DIR"/in -type f -print0 | xargs -0 -I {} sh -c 'ulimit -s unlimited && echo "executing {}..." && cat "{}" | ./a.out >> "./out/$(basename "{}" .in)"'
          find "$DIR"/in -type f -print0 | xargs -0 -I {} sh -c 'echo "judging {}..." && $DIR/checker $DIR/in/$(basename "{}") $DIR/out/$(basename "{}" .in).out ./out/$(basename "{}" .in)'

  yukicoder-verify:
    needs: prepare-matrix-yukicoder
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        problem: ${{ fromJson(needs.prepare-matrix-yukicoder.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract matrix info
        run: |
          echo "PROBLEM=`echo "${{ matrix.problem }}" | cut -d'$' -f1`" >> $GITHUB_ENV
          echo "FILE=`echo "${{ matrix.problem }}" | cut -d'$' -f2-`" >> $GITHUB_ENV
          echo "URL=https://yukicoder.me/problems/no/$PROBLEM" >> $GITHUB_ENV
      - name: Echo filename
        run: echo problem:$PROBLEM,file:$FILE,url:$URL
      - name: Cache yukicoder testcases
        uses: actions/cache@v4
        with:
          path: |
            testcases/${{ env.PROBLEM }}
          key: yukicoder-${{ env.PROBLEM }}-${{ hashFiles('**/.yukicoder_force_refresh') }}
          restore-keys: |
            yukicoder-${{ env.PROBLEM }}-
      - name: Download yukicoder IO files via API
        env:
          YUKICODER_TOKEN: ${{ secrets.YUKICODER_TOKEN }}
        run: |
          set -eu
          BASE_DIR="testcases/${PROBLEM}"
          IN_DIR="$BASE_DIR/in"
          OUT_DIR="$BASE_DIR/out"
          ACTUAL_DIR="$BASE_DIR/actual"
          mkdir -p "$IN_DIR" "$OUT_DIR" "$ACTUAL_DIR"
          API_BASE="https://yukicoder.me/api/v1/problems/${PROBLEM}/file"
          echo "Listing inputs from ${API_BASE}/in/"
          curl -fsSL \
            --retry 5 --retry-delay 2 --retry-all-errors \
            -H "Authorization: Bearer ${YUKICODER_TOKEN}" \
            "${API_BASE}/in/" | tee "$BASE_DIR/list_in.json" | jq -r '.[]' > "$BASE_DIR/list_in.txt"
          echo "Listing outputs from ${API_BASE}/out/"
          curl -fsSL \
            --retry 5 --retry-delay 2 --retry-all-errors \
            -H "Authorization: Bearer ${YUKICODER_TOKEN}" \
            "${API_BASE}/out/" | tee "$BASE_DIR/list_out.json" | jq -r '.[]' > "$BASE_DIR/list_out.txt"

          echo "Input files:"
          cat "$BASE_DIR/list_in.txt" | sed 's/^/  - /'
          echo "Output files:"
          cat "$BASE_DIR/list_out.txt" | sed 's/^/  - /'

          # Download only missing files (cache hit when exists)
          while read -r name; do
            [ -z "$name" ] && continue
            if [ -f "$IN_DIR/$name" ]; then
              echo "cache hit: in/$name"
            else
              echo "downloading: in/$name"
              curl -fsSL \
                --retry 5 --retry-delay 2 --retry-all-errors \
                -H "Authorization: Bearer ${YUKICODER_TOKEN}" \
                "${API_BASE}/in/${name}" -o "$IN_DIR/${name}"
            fi
          done < "$BASE_DIR/list_in.txt"

          while read -r name; do
            [ -z "$name" ] && continue
            if [ -f "$OUT_DIR/$name" ]; then
              echo "cache hit: out/$name"
            else
              echo "downloading: out/$name"
              curl -fsSL \
                --retry 5 --retry-delay 2 --retry-all-errors \
                -H "Authorization: Bearer ${YUKICODER_TOKEN}" \
                "${API_BASE}/out/${name}" -o "$OUT_DIR/${name}"
            fi
          done < "$BASE_DIR/list_out.txt"
      - name: Compile target
        run: |
          g++ -std=c++20 -O2 -I `dirname $FILE` $FILE
      - name: Execute and judge (diff)
        run: |
          set -eu
          shopt -s nullglob
          BASE_DIR="testcases/${PROBLEM}"
          IN_DIR="$BASE_DIR/in"
          OUT_DIR="$BASE_DIR/out"
          ACTUAL_DIR="$BASE_DIR/actual"
          for f in "$IN_DIR"/*; do
            name=$(basename "$f")
            echo "executing $name..."
            ./a.out < "$f" > "$ACTUAL_DIR/$name"
            if [ -f "$OUT_DIR/$name" ]; then
              echo "judging $name..."
              diff -u "$OUT_DIR/$name" "$ACTUAL_DIR/$name"
            else
              echo "warning: expected output $OUT_DIR/$name not found; skipping diff" >&2
            fi
          done
